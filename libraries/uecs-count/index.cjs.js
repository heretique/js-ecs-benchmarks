"use strict";Object.defineProperty(exports,"__esModule",{value:!0});class t{constructor(t,n){this.view=function(t,n){const o=n.length;let s="";const i=[],c=[];for(let t=0;t<o;++t){const o=n[t].name,r=`${e.storage}${o}`;s+=`const ${r} = ${e.world}.components["${o}"];\n`,i.push(r);const l=`${r}Components`;s+=`const ${l} = ${r}.components;\n`,c.push(l)}let r="";r+="let min = Infinity;\n",r+="let storage = undefined;\n";for(let t=0;t<o;++t)r+=`if (${i[t]}.count < min) {\n    storage = ${i[t]};\n    min = ${i[t]}.count;\n}\n`;r+="if (storage === undefined) return;\n",r+=`const ${e.entities} = Object.keys(storage.components);\n`;let l="";const a=[];for(let t=0;t<o;++t){const o=`${n[t].name}${t}`;l+=`const ${o} = ${c[t]}[${e.entity}];\n`,a.push(o)}let h="if (";for(let t=0;t<o;++t)h+=`${a[t]} === undefined`,t!==o-1&&(h+=" || ");h+=") continue;\n";const u=s+`return function(${e.callback}) {\n`+r+`for (const ${e.entity} of ${e.entities}) {\n`+l+h+`if (${e.callback}(parseInt(${e.entity}),${function(t,e){let n="";const o=t.length-1;for(let s=0;s<o;++s)n+=t[s]+e;return n+=t[o],n}(a,",")}) === false) return;\n}\n}`;return new Function(e.world,u)(t)}(t,n)}each(t){this.view(t)}}const e={world:"_$WORLD",entity:"_$ENTITY",entities:"_$ENTITIES",callback:"_$CALLBACK",storage:"_$STORAGE",components:"_$COMPONENTS"};class n{static for(t){const e=t.toString();let o=n.cache[e];return null==o&&(o=Object.defineProperty(class{},"name",{value:"T$"+e}),n.cache[e]=o),o}}n.cache={},exports.Null=-1,exports.Tag=n,exports.World=class{constructor(){this.entitySequence=0,this.entities=new Set,this.components={},this.views={}}create(...t){const e=this.entitySequence++;this.entities.add(e);for(let n=0,o=t.length;n<o;++n)this.emplace(e,t[n]);return e}insert(t,...e){t>=this.entitySequence&&(this.entitySequence=t+1),this.entities.add(t);for(let n=0,o=e.length;n<o;++n)this.emplace(t,e[n]);return t}exists(t){return this.entities.has(t)}destroy(t){this.entities.delete(t);for(const e in this.components){const n=this.components[e],o=n.components[t];void 0!==o&&(n.count--,void 0!==o.free&&o.free()),delete n.components[t]}}get(t,e){const n=e.name,o=this.components[n];if(void 0!==o)return o.components[t]}has(t,e){const n=e.name,o=this.components[n];return void 0!==o&&void 0!==o.components[t]}emplace(t,e){var n;const o=null!==(n=e.name)&&void 0!==n?n:e.constructor.name;if(!this.entities.has(t))throw new Error(`Cannot set component "${o}" for dead entity ID ${t}`);let s=this.components[o];void 0===s&&(this.components[o]={components:{},count:0},s=this.components[o]),void 0===s.components[t]&&s.count++,s.components[t]=e}remove(t,e){const n=e.name,o=this.components[n];if(void 0===o)return;const s=o.components[t];return void 0!==s&&o.count--,delete o.components[t],s}size(){return this.entities.size}view(...e){let n="";for(let t=0;t<e.length;++t)n+=e[t].name;if(!(n in this.views)){for(let t=0;t<e.length;++t)void 0===this.components[e[t].name]&&(this.components[e[t].name]={components:{},count:0});this.views[n]=new t(this,e)}return this.views[n]}clear(){for(const t of this.entities.values())this.destroy(t)}all(){return this.entities.values()}};
