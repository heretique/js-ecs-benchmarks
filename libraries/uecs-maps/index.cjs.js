"use strict";Object.defineProperty(exports,"__esModule",{value:!0});class e{static for(t){const n=t.toString();let s=e.cache[n];return null==s&&(s=Object.defineProperty(class{},"name",{value:"T$"+n}),e.cache[n]=s),s}}e.cache={};class t{constructor(e,t){this.view=function(e,t){const s=t.length;let i="";const o=[];for(let e=0;e<s;++e){const s=t[e].name,r=`${n.storage}${s}`;i+=`const ${r} = ${n.world}.components["${s}"];\n`,o.push(r)}let r="";r+="let min = Infinity;\n",r+="let storage = undefined;\n";for(let e=0;e<s;++e)r+=`if (${o[e]}.size < min) {\n    storage = ${o[e]};\n    min = ${o[e]}.size;\n}\n`;r+="if (storage === undefined) return;\n",r+=`const ${n.entities} = storage.keys();\n`;let c="";const l=[];for(let e=0;e<s;++e){const s=`${t[e].name}${e}`;c+=`const ${s} = ${o[e]}.get(${n.entity});\n`,l.push(s)}let a="if (";for(let e=0;e<s;++e)a+=`${l[e]} === undefined`,e!==s-1&&(a+=" || ");a+=") continue;\n";const h=i+`return function(${n.callback}) {\n`+r+`for (const ${n.entity} of ${n.entities}) {\n`+c+a+`if (${n.callback}(${n.entity},${function(e,t){let n="";const s=e.length-1;for(let i=0;i<s;++i)n+=e[i]+t;return n+=e[s],n}(l,",")}) === false) return;\n}\n}`;return new Function(n.world,h)(e)}(e,t)}each(e){this.view(e)}}const n={world:"_$WORLD",entity:"_$ENTITY",entities:"_$ENTITIES",callback:"_$CALLBACK",storage:"_$STORAGE"};exports.Null=-1,exports.Tag=e,exports.World=class{constructor(){this.entitySequence=0,this.entities=new Set,this.components={},this.views={}}create(...e){const t=this.entitySequence++;this.entities.add(t);for(let n=0,s=e.length;n<s;++n)this.emplace(t,e[n]);return t}insert(e,...t){e>=this.entitySequence&&(this.entitySequence=e+1),this.entities.add(e);for(let n=0,s=t.length;n<s;++n)this.emplace(e,t[n]);return e}exists(e){return this.entities.has(e)}destroy(e){this.entities.delete(e);for(const t in this.components){const n=this.components[t],s=n.get(e);void 0!==s&&void 0!==s.free&&s.free(),n.delete(e)}}get(e,t){const n=t.name,s=this.components[n];if(void 0!==s)return s.get(e)}has(e,t){const n=t.name,s=this.components[n];return void 0!==s&&s.has(e)}emplace(e,t){var n;const s=null!==(n=t.name)&&void 0!==n?n:t.constructor.name;if(!this.entities.has(e))throw new Error(`Cannot set component "${s}" for dead entity ID ${e}`);let i=this.components[s];void 0===i&&(i=new Map,this.components[s]=i),i.set(e,t)}remove(e,t){const n=t.name,s=this.components[n];if(void 0===s)return;const i=s.get(e);return s.delete(e),i}size(){return this.entities.size}view(...e){let n="";for(let t=0;t<e.length;++t)n+=e[t].name;if(!(n in this.views)){for(let t=0;t<e.length;++t)void 0===this.components[e[t].name]&&(this.components[e[t].name]=new Map);this.views[n]=new t(this,e)}return this.views[n]}clear(){for(const e of this.entities.values())this.destroy(e)}all(){return this.entities.values()}};
