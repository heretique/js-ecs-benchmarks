!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).uECS={})}(this,(function(e){"use strict";function t(e,t){return e.left<t.left&&e.right<t.right?-1:e.left>t.left&&e.right>t.right?1:0}class s{constructor(){this.free=[],this.free.push({left:1,right:Number.MAX_SAFE_INTEGER})}reserve(){const e=this.free[0];if(e.left==Number.MAX_SAFE_INTEGER)return 0;const t=e.left;if(e.left+1<e.right)this.free[0]={left:e.left+1,right:e.right};else{if(e.left+1==Number.MAX_SAFE_INTEGER)return 0;this.free.shift()}return t}release(e){if(0==e||e==Number.MAX_SAFE_INTEGER)return;const s=this.free.findIndex((t=>t.left<=e&&t.right>e));if(-1==s)this.free.push({left:e,right:e+1});else{const t=this.free[s],n={left:t.left,right:e},i={left:e+1,right:t.right};this.free.splice(s,1,n,i)}this.free.sort(t)}}class n{constructor(e){this.size=0,this.maxCapacity=55e4,this.capacity=e,this.dense=new Int32Array(e),this.sparse=new Int32Array(e)}add(e){if(e>=this.maxCapacity)throw new Error(`Value ${e} is greater than or equal to the maximum capacity of the data structure ${this.maxCapacity}`);if(e>=this.capacity){const t=Math.max(2*this.capacity,e+1),s=new Int32Array(t),n=new Int32Array(t);s.set(this.dense),n.set(this.sparse),this.dense=s,this.sparse=n,this.capacity=t}const t=this.size;return this.dense[t]=e,this.sparse[e]=t,this.size++,t}remove(e){if(0===this.size)return;const t=this.size-1,s=this.sparse[e];this.dense[s]=this.dense[t],this.sparse[this.dense[t]]=s,this.size--}has(e){return this.sparse[e]<this.size&&this.dense[this.sparse[e]]==e}clear(){this.size=0}getSize(){return this.size}getCapacity(){return this.capacity}get(e){return this.sparse[e]}getValues(){return this.dense}[Symbol.iterator](){let e=0;return{next:()=>e<this.size?{done:!1,value:this.dense[e++]}:{done:!0,value:null}}}forEach(e){for(let t=0;t<this.size;t++)e(this.dense[t])}map(e){const t=[];for(let s=0;s<this.size;s++)t.push(e(this.dense[s]));return t}filter(e){const t=[];for(let s=0;s<this.size;s++)e(this.dense[s])&&t.push(this.dense[s]);return t}}class i{constructor(e,t){this.view=function(e,t){const s=t.length;let n="";const i=[];for(let e=0;e<s;++e){const s=t[e].name,o=`${r.storage}${s}`;n+=`const ${o} = ${r.world}.componentsStorage["${s}"];\n`,i.push(o)}let o="";o+="let min = Infinity;\n",o+="let storage = undefined;\n";for(let e=0;e<s;++e)o+=`if (${i[e]}.components.length < min) {\n  storage = ${i[e]};\n  min = ${i[e]}.components.length;\n}\n`;o+="if (storage === undefined) return;\n",o+=`const ${r.entities} = storage.sparseSet.getValues();\n`;let a="";a+="if (";for(let e=0;e<s;++e)a+=`!${i[e]}.sparseSet.has(${r.entity})`,e!==s-1&&(a+=" || ");a+=") continue;\n";let h="";h+="let index = 0;\n";const c=[];for(let e=0;e<s;++e){const s=`${t[e].name}${e}`;h+=`index = ${i[e]}.sparseSet.get(${r.entity});\n`,h+=`const ${s} = ${i[e]}.components[index];\n`,c.push(s)}const l=n+`return function(${r.callback}) {\n`+o+`for (const ${r.entity} of ${r.entities}) {\n`+a+h+`if (${r.callback}(${r.entity},${function(e,t){let s="";const n=e.length-1;for(let i=0;i<n;++i)s+=e[i]+t;return s+=e[n],s}(c,",")}) === false) return;\n}\n}`;return new Function(r.world,l)(e)}(e,t)}each(e){this.view(e)}}const r={world:"_$WORLD",entity:"_$ENTITY",entities:"_$ENTITIES",callback:"_$CALLBACK",storage:"_$STORAGE"};class o{static for(e){const t=e.toString();let s=o.cache[t];return null==s&&(s=Object.defineProperty(class{},"name",{value:"T$"+t}),o.cache[t]=s),s}}o.cache={},e.Null=-1,e.Tag=o,e.World=class{constructor(){this.ids=new s,this.entities=new n(400096),this.componentsStorage={},this.views={}}create(...e){const t=this.ids.reserve();this.entities.add(t);for(let s=0,n=e.length;s<n;++s)this.emplace(t,e[s]);return t}exists(e){return this.entities.has(e)}destroy(e){if(this.entities.has(e)){this.entities.remove(e),this.ids.release(e);for(const t in this.componentsStorage){const s=this.componentsStorage[t],n=s.sparseSet;if(n.has(e)){const t=n.get(e),i=s.components[t];void 0!==i&&void 0!==i.free&&i.free(),n.remove(e)}}}}get(e,t){const s=t.name,n=this.componentsStorage[s];if(void 0===n)return;const i=n.sparseSet;if(!i.has(e))return;const r=i.get(e);return n.components[r]}has(e,t){const s=t.name,n=this.componentsStorage[s];return void 0!==n&&n.sparseSet.has(e)}emplace(e,t){var s;const i=null!==(s=t.name)&&void 0!==s?s:t.constructor.name;if(!this.entities.has(e))throw new Error(`Cannot set component "${i}" for dead entity ID ${e}`);let r=this.componentsStorage[i];void 0===r&&(r={components:[],sparseSet:new n(400096)}),this.componentsStorage[i]=r;const o=r.sparseSet.add(e);r.components[o]=t}remove(e,t){const s=t.name,n=this.componentsStorage[s];if(void 0===n)return;const i=n.sparseSet;if(!i.has(e))return;const r=i.get(e),o=n.components[r],a=i.getSize()-1;return n.components[r]=n.components[a],n.components.pop(),i.remove(e),o}size(){return this.entities.getSize()}view(...e){let t="";for(let s=0;s<e.length;++s)t+=e[s].name;if(!(t in this.views)){for(let t=0;t<e.length;++t)void 0===this.componentsStorage[e[t].name]&&(this.componentsStorage[e[t].name]={components:[],sparseSet:new n(400096)});this.views[t]=new i(this,e)}return this.views[t]}clear(){for(;this.entities.getSize()>0;)this.destroy(this.entities.getValues()[0])}all(){return this.entities}},Object.defineProperty(e,"__esModule",{value:!0})}));
